
interface MacroFunction {
    void call(String[] tokens, ArrayList<String> stack, ArrayList<String> registers);
}

class Macro {

    private String[] keywords;
    private MacroFunction[] functions;
    private ArrayList<String> stack = new ArrayList<String>();
    private ArrayList<String> registers = new ArrayList<String>();
	private HashMap<String, Integer> gotos = new HashMap<String, Integer>();
    private boolean closed = false;

    private int k = 0;

    public Macro(String[] keywords, MacroFunction[] functions) {  
        this.keywords = keywords;
        this.functions = functions; 
    }  

    public Macro() {
        this.keywords = new String[] {
            "REG",
            "SET", 
            "OUT", 
            "EXT", 
            "PSH", 
            "ADD", 
            "SUB", 
            "MUL", 
            "DIV", 
            "STS",
            "STR",
            "JMP",
			"RIF",
			"SIF",
            "INP"
        };
        this.functions = new MacroFunction[] {
            (tokens, stack, registers) -> {
                registers.add("0");
            },
            (tokens, stack, registers) -> {
                registers.set(Integer.parseInt(tokens[1]), tokens[2]);
            },
            (tokens, stack, registers) -> {
                System.out.println(registers.get(Integer.parseInt(tokens[1])));
            },
            (tokens, stack, registers) -> {
                closed = true;
            },
            (tokens, stack, registers) -> {
                stack.add(tokens[1]);
            },
            (tokens, stack, registers) -> {
                stack.add(Integer.toString(Integer.parseInt(stack.get(stack.size() - 1)) + Integer.parseInt(stack.get(stack.size() - 2))));
                stack.remove(stack.size() - 2);
                stack.remove(stack.size() - 3);
            },
            (tokens, stack, registers) -> {
                stack.add(Integer.toString(Integer.parseInt(stack.get(stack.size() - 1)) - Integer.parseInt(stack.get(stack.size() - 2))));
                stack.remove(stack.size() - 2);
                stack.remove(stack.size() - 3);
            },
            (tokens, stack, registers) -> {
                stack.add(Integer.toString(Integer.parseInt(stack.get(stack.size() - 1)) * Integer.parseInt(stack.get(stack.size() - 2))));
                stack.remove(stack.size() - 2);
                stack.remove(stack.size() - 3);
            },
            (tokens, stack, registers) -> {
                stack.add(Integer.toString(Integer.parseInt(stack.get(stack.size() - 1)) / Integer.parseInt(stack.get(stack.size() - 2))));
                stack.remove(stack.size() - 2);
                stack.remove(stack.size() - 3);
            },
            (tokens, stack, registers) -> {
                registers.set(Integer.parseInt(tokens[1]), stack.get(stack.size() - 1));
                stack.remove(stack.size() - 1);
            },
            (tokens, stack, registers) -> {
                stack.add(register.get(Integer.toString(token[1])))
            },
            (tokens, stack, registers) -> {
                k = gotos.get(token[1]);
            },
			(tokens, stack, registers) -> {
                if (registers.get(Integer.parseInt(token[1])) == "1") {
					k = gotos.get(token[2]);
				}
            },
			(tokens, stack, registers) -> {
                if (stack.get(stack.size() - 1) == "1") {
					k = gotos.get(token[2]);
				}
            },
            (tokens, stack, registers) -> {
                registers.add(new Scanner(System.in).nextLine());
            }
        };
    }

    public ArrayList<String> getStack() {
        return stack;
    }

    public ArrayList<String> getRegisters() {
        return registers;
    }

    public void setStack(ArrayList<String> stack) {
        this.stack = stack;
    }

    public void setRegisters(ArrayList<String> registers) {
        this.registers = registers;
    }

    public void clearRegisters() {
        registers.clear();
    }

    public void clearStack() {
        stack.clear();
    }

    public void parse(String[] program) {
        if (!closed) {
			for (k = 0; k < program.length; k++) {
                String[] tokens = program[k].split(", ");

                for (int j = 0; j < tokens.length; j++) {
                    tokens[j] = tokens[j].trim().replace("\n", "").replace("\"", "");
                }
				if (tokens[0].equals("MRK")) {
					gotos.put(token[1], k);
				}
            }
            for (k = 0; k < program.length; k++) {
                String[] tokens = program[k].split(", ");

                for (int j = 0; j < tokens.length; j++) {
                    tokens[j] = tokens[j].trim().replace("\n", "").replace("\"", "");
                }

                for (int i = 0; i < keywords.length; i++) {
                    if (tokens[0].trim().equals(keywords[i])) {
                        functions[i].call(tokens, stack, registers);
                    }
                }
            }
        } else {
            System.out.println("MACRO CLOSED");
        }
    }

    public void inline(String line) {
        if (!closed) {
            String[] tokens = line.split(", ");

            for (int j = 0; j < tokens.length; j++) {
                tokens[j] = tokens[j].trim().replace("\n", "").replace("\"", "");
            }

            for (int i = 0; i < keywords.length; i++) {
                if (tokens[0].trim().equals(keywords[i])) {
                    functions[i].call(tokens, stack, registers);
                }
            }
        } else {
            System.out.println("MACRO CLOSED");
        }
    }  
}